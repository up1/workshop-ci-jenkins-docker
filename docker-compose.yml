services:
  dotnet:
    image: somkiat/dotnet:2.0
    build:
      context: ./hello-dotnet
      dockerfile: Dockerfile
    ports:
      - 8888:80
    volumes:
      - ./local-data:/mydata
      
  frontend:
    image: somkiat/frontend:1.0
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-8888}:80"
    # depends_on:
    #   backend:
    #     condition: service_healthy

  java:
    image: somkiat/demojava:1.0
    build:
      context: ./hellojava
      dockerfile: Dockerfile
    ports:
      - "${JAVA_BACKEND_PORT:-8080}:8080"
    depends_on:
      db:
        condition: service_healthy
  
  backend:
    image: somkiat/backend:1.0
    build:
      context: ./backend
      dockerfile: Dockerfile
    # mem_limit: 100m
    # cpus: 0.5
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    environment:
      DB_HOST: db
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    depends_on:
      db:
        condition: service_healthy

  db2:
    image: my_postgres:1.0
    #container_name: postgres2
    build:
      context: ./database
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres

  db:
    image: postgres:16.0
    #container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - ./database/table.sql:/docker-entrypoint-initdb.d/1.sql
      - ./database/data.sql:/docker-entrypoint-initdb.d/2.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  backend_test:
    build: ./backend-testing
    tty: true
    volumes:
      - ./backend-test-report:/etc/newman/newman
  
  frontend_test:
    build: ./frontend-testing
    volumes:
      - ./frontend-test-report:/app/report
    environment:
      - FRONTEND_URL=https://www.google.com

  frontend_test_playwright:
    build: ./playwright
    volumes:
      - ./frontend-test-playwright-report:/app/report
  
  sonarscanner_frontend:
    image: sonarsource/sonar-scanner-cli
    environment:
      - SONAR_HOST_URL=http://165.22.60.46:9000
      - SONAR_LOGIN=admin
      - SONAR_PASSWORD=xitgmLwmp
      - SONAR_PROJECT_BASE_DIR=/app
    volumes:
      - ./frontend:/app
  
  sonarscanner_backend:
    image: sonarsource/sonar-scanner-cli
    environment:
      - SONAR_HOST_URL=http://165.22.60.46:9000
      - SONAR_LOGIN=admin
      - SONAR_PASSWORD=xitgmLwmp
      - SONAR_PROJECT_BASE_DIR=/app
    volumes:
      - ./backend:/app

  gitleak:
    build: ./gitleak
    tty: true

  mockserver:
    build: ./mock-server
    ports:
      - 8882:8882
